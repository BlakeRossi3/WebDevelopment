{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://audiohw3/./src/utils.ts","webpack://audiohw3/./src/audio.ts","webpack://audiohw3/./src/classes/sprite.ts","webpack://audiohw3/./src/canvas.ts","webpack://audiohw3/./src/main.ts","webpack://audiohw3/./src/loader.ts"],"sourcesContent":["const makeColor = (red, green, blue, alpha = 1) => {\r\n    return `rgba(${red},${green},${blue},${alpha})`;\r\n  };\r\n  \r\n  const getRandom = (min, max) => {\r\n    return Math.random() * (max - min) + min;\r\n  };\r\n  \r\n  const getRandomColor = () => {\r\n    const floor = 35; // so that colors are not too bright or too dark \r\n    const getByte = () => getRandom(floor,255-floor);\r\n    return `rgba(${getByte()},${getByte()},${getByte()},1)`;\r\n  };\r\n  \r\n  const getLinearGradient = (ctx,startX,startY,endX,endY,colorStops) => {\r\n    let lg = ctx.createLinearGradient(startX,startY,endX,endY);\r\n    for(let stop of colorStops){\r\n      lg.addColorStop(stop.percent,stop.color);\r\n    }\r\n    return lg;\r\n  };\r\n  \r\n  // https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\r\n  const goFullscreen = (element) => {\r\n    if (element.requestFullscreen) {\r\n      element.requestFullscreen();\r\n    } else if (element.mozRequestFullscreen) {\r\n      element.mozRequestFullscreen();\r\n    } else if (element.mozRequestFullScreen) { // camel-cased 'S' was changed to 's' in spec\r\n      element.mozRequestFullScreen();\r\n    } else if (element.webkitRequestFullscreen) {\r\n      element.webkitRequestFullscreen();\r\n    }\r\n    // .. and do nothing if the method is not supported\r\n  };\r\n  \r\n\r\n  export {makeColor, getRandomColor, getLinearGradient, goFullscreen};","let audioCtx: AudioContext;\r\n\r\nlet element: HTMLAudioElement, sourceNode: MediaElementAudioSourceNode, analyserNode: AnalyserNode, gainNode: GainNode, bassNode: BiquadFilterNode, trebleNode: BiquadFilterNode;\r\n\r\nconst DEFAULTS = Object.freeze({\r\n    gain: 0.5,\r\n    numSamples: 256,\r\n});\r\n\r\nlet audioData: Uint8Array = new Uint8Array(DEFAULTS.numSamples / 2);\r\n\r\nconst setupWebaudio = (filePath: string): void => {\r\n    const AudioContext = window.AudioContext || (window as any).webkitAudioContext;\r\n    audioCtx = new AudioContext();\r\n\r\n    element = new Audio();\r\n\r\n    loadSoundFile(filePath);\r\n\r\n    sourceNode = audioCtx.createMediaElementSource(element);\r\n\r\n    analyserNode = audioCtx.createAnalyser();\r\n    analyserNode.fftSize = DEFAULTS.numSamples;\r\n\r\n    gainNode = audioCtx.createGain();\r\n    gainNode.gain.value = DEFAULTS.gain;\r\n\r\n    bassNode = audioCtx.createBiquadFilter();\r\n    bassNode.type = \"lowshelf\";\r\n    bassNode.frequency.value = 200;\r\n    bassNode.gain.value = 0;\r\n\r\n    trebleNode = audioCtx.createBiquadFilter();\r\n    trebleNode.type = \"highshelf\";\r\n    trebleNode.frequency.value = 3000;\r\n    trebleNode.gain.value = 0;\r\n\r\n    sourceNode.connect(bassNode);\r\n    bassNode.connect(trebleNode);\r\n    trebleNode.connect(analyserNode);\r\n    analyserNode.connect(gainNode);\r\n    gainNode.connect(audioCtx.destination);\r\n};\r\n\r\nconst loadSoundFile = (filePath: string): void => {\r\n    element.src = filePath;\r\n};\r\n\r\nconst playCurrentSound = (): void => {\r\n    element.play();\r\n};\r\n\r\nconst pauseCurrentSound = (): void => {\r\n    element.pause();\r\n};\r\n\r\nconst setVolume = (value: number): void => {\r\n    gainNode.gain.value = value;\r\n};\r\n\r\nconst setBass = (value: number): void => {\r\n    bassNode.gain.value = value;\r\n};\r\n\r\nconst setTreble = (value: number): void => {\r\n    trebleNode.gain.value = value;\r\n};\r\n\r\nexport {\r\n    audioCtx,\r\n    setupWebaudio,\r\n    playCurrentSound,\r\n    pauseCurrentSound,\r\n    loadSoundFile,\r\n    setVolume,\r\n    analyserNode,\r\n    bassNode,\r\n    trebleNode,\r\n    setBass,\r\n    setTreble,\r\n};","class Sprite {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    image: HTMLImageElement;\r\n    pulseFactor: number;\r\n\r\n    constructor(x: number, y: number, imageSrc: string, width: number = 50, height: number = 50) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.image = new Image();\r\n        this.image.src = imageSrc;\r\n        this.pulseFactor = 1;\r\n    }\r\n\r\n    update(audioData: Uint8Array, bassScale: number, trebleScale: number, audioNum: number): void {\r\n        const percent = audioData[audioNum] / 255;\r\n        const maxPulse = 1.5;\r\n\r\n        const bassPulseFactor = Math.sin(Date.now() / 500) * 0.5 + 1;\r\n        const treblePulseFactor = Math.sin(Date.now() / 500) * 0.5 + 1;\r\n\r\n        this.pulseFactor =\r\n            1 +\r\n            (percent * (maxPulse - 1) * (bassScale * bassPulseFactor + trebleScale * treblePulseFactor)) / 2;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        const scaledWidth = this.width * this.pulseFactor;\r\n        const scaledHeight = this.height * this.pulseFactor;\r\n\r\n        ctx.drawImage(\r\n            this.image,\r\n            this.x - scaledWidth / 2,\r\n            this.y - scaledHeight / 2,\r\n            scaledWidth,\r\n            scaledHeight\r\n        );\r\n\r\n    }    \r\n}    \r\n\r\nexport default Sprite;\r\n","/*\r\n    The purpose of this file is to take in the analyser node and a <canvas> element: \r\n      - the module will create a drawing context that points at the <canvas> \r\n      - it will store the reference to the analyser node\r\n      - in draw(), it will loop through the data in the analyser node\r\n      - and then draw something representative on the canvas\r\n      - maybe a better name for this file/module would be *visualizer.ts* ?\r\n*/\r\n\r\nimport * as utils from './utils';\r\nimport Sprite from './classes/sprite';\r\n\r\n\r\nlet ctx: CanvasRenderingContext2D;\r\nlet canvasWidth: number;\r\nlet canvasHeight: number;\r\nlet analyserNode: AnalyserNode;\r\nlet audioData: Uint8Array;\r\n\r\nlet waveForm: boolean = false;\r\n\r\nlet gifImage: HTMLImageElement = new Image();\r\ngifImage.src = \"media/space.jpg\";\r\n\r\nlet starData: { x: number; y: number }[] = [];\r\nlet starSprites: Sprite[] = [];\r\n\r\n// Fetch star data and create sprites\r\nfetch('data/av-data.json')\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n        starData = data.stars;\r\n        starData.forEach((data: { x: number; y: number }) => {\r\n            starSprites.push(new Sprite(data.x, data.y, \"media/star.png\", 50, 50));\r\n        });\r\n    });\r\n\r\n// Interface for draw parameters\r\ninterface DrawParams {\r\n    showBars?: boolean;\r\n    showCircles?: boolean;\r\n    showNoise?: boolean;\r\n    showInvert?: boolean;\r\n    showEmboss?: boolean;\r\n}\r\n\r\n// Setup the canvas and analyser node\r\nconst setupCanvas = (canvasElement: HTMLCanvasElement, analyserNodeRef: AnalyserNode): void => {\r\n    ctx = canvasElement.getContext(\"2d\")!;\r\n    canvasWidth = canvasElement.width;\r\n    canvasHeight = canvasElement.height;\r\n    analyserNode = analyserNodeRef;\r\n    audioData = new Uint8Array(analyserNode.fftSize / 2);\r\n};\r\n\r\n// Draw function\r\nconst draw = (params: DrawParams = {}): void => {\r\n    if (waveForm) {\r\n        analyserNode.getByteTimeDomainData(audioData); // waveform data\r\n    } else {\r\n        analyserNode.getByteFrequencyData(audioData);\r\n    }\r\n\r\n    ctx.save();\r\n    ctx.drawImage(gifImage, 0, 0, canvasWidth, canvasHeight);\r\n    ctx.restore();\r\n\r\n    // Draw bars\r\n    if (params.showBars) {\r\n        if (!waveForm) {\r\n            let barSpacing = 4;\r\n            let margin = 5;\r\n            let screenWidthForBars = canvasWidth - (audioData.length * barSpacing) - margin * 2;\r\n            let barWidth = screenWidthForBars / audioData.length;\r\n            let centerY = canvasHeight / 2;\r\n\r\n            ctx.save();\r\n            ctx.fillStyle = 'rgba(74, 0, 110, 0.5)';\r\n            ctx.strokeStyle = 'rgb(255, 255, 255)';\r\n\r\n            for (let i = 0; i < audioData.length; i++) {\r\n                let barValue = audioData[i];\r\n                let barTop = centerY - barValue / 2;\r\n                let barBottom = centerY + barValue / 2;\r\n\r\n                if (i % 2 === 0) {\r\n                    ctx.fillRect(500 + (margin + i * (barWidth + barSpacing)), barTop, barWidth, barBottom - barTop);\r\n                    ctx.strokeRect(500 + (margin + i * (barWidth + barSpacing)), barTop, barWidth, barBottom - barTop);\r\n                } else {\r\n                    ctx.fillRect(500 - (margin + i * (barWidth + barSpacing)), barTop, barWidth, barBottom - barTop);\r\n                    ctx.strokeRect(500 - (margin + i * (barWidth + barSpacing)), barTop, barWidth, barBottom - barTop);\r\n                }\r\n            }\r\n            ctx.restore();\r\n        }\r\n    }\r\n\r\n    // Draw circles\r\n    if (params.showCircles) {\r\n        let bassValue = parseFloat((document.getElementById(\"bass-slider\") as HTMLInputElement).value);\r\n        let trebleValue = parseFloat((document.getElementById(\"treble-slider\") as HTMLInputElement).value);\r\n\r\n        let bassScale = (bassValue / 30) + 1;\r\n        let trebleScale = (trebleValue / 30) + 1;\r\n\r\n        let maxRadius = canvasHeight / 4;\r\n        ctx.save();\r\n        ctx.globalAlpha = 0.5;\r\n\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            let percent = audioData[i] / 255;\r\n\r\n            let circleRadius = percent * maxRadius;\r\n            let bassCircleRadius = circleRadius * bassScale;\r\n            let trebleCircleRadius = circleRadius * trebleScale;\r\n\r\n            let bassPulseFactor = Math.sin(Date.now() / 500) * 0.5 + 1;\r\n            let treblePulseFactor = Math.sin(Date.now() / 500) * 0.5 + 1;\r\n\r\n            bassCircleRadius *= bassPulseFactor;\r\n            trebleCircleRadius *= treblePulseFactor;\r\n\r\n            ctx.beginPath();\r\n            ctx.fillStyle = utils.makeColor(75, 0, 130, .34 - percent / 3.0);\r\n            ctx.arc(canvasWidth - 20, 20, bassCircleRadius, 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n            ctx.closePath();\r\n\r\n            ctx.beginPath();\r\n            ctx.fillStyle = utils.makeColor(128, 0, 128, .5 - percent / 5.0);\r\n            ctx.arc(0, 20, trebleCircleRadius, 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n            ctx.closePath();\r\n        }\r\n        ctx.restore();\r\n    }\r\n\r\n    // Update and draw sprites\r\n    let audioNum = Math.floor(Math.random() * audioData.length);\r\n    starSprites.forEach((star) => {\r\n        star.update(audioData, 1, 1, audioNum);\r\n        star.draw(ctx);\r\n    });\r\n\r\n    // Apply image effects\r\n    let imageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\r\n    let data = imageData.data;\r\n    let length = data.length;\r\n    let width = imageData.width;\r\n\r\n    for (let i = 0; i < length; i += 4) {\r\n        if (params.showNoise && Math.random() < 0.05) {\r\n            data[i] = data[i + 1] = data[i + 2] = 0;\r\n            data[i] = 255;\r\n        }\r\n        if (params.showInvert) {\r\n            let red = data[i], green = data[i + 1], blue = data[i + 2];\r\n            data[i] = 255 - red;\r\n            data[i + 1] = 255 - green;\r\n            data[i + 2] = 255 - blue;\r\n        }\r\n    }\r\n\r\n    if (params.showEmboss) {\r\n        for (let i = 0; i < length; i++) {\r\n            if (i % 4 == 3) continue;\r\n            data[i] = 127 + 2 * data[i] - data[i + 4] - data[i + width * 4];\r\n        }\r\n    }\r\n\r\n    ctx.putImageData(imageData, 0, 0);\r\n};\r\n\r\n// Toggle waveform mode\r\nconst changeAudioForm = (): void => {\r\n    waveForm = !waveForm;\r\n};\r\n\r\n// Get waveform mode\r\nconst getWaveForm = (): boolean => {\r\n    return waveForm;\r\n};\r\n\r\nexport { setupCanvas, draw, gifImage, changeAudioForm, getWaveForm };","import * as utils from './utils';\r\nimport * as audio from './audio';\r\nimport * as canvas from './canvas';\r\nimport { DrawParams } from './interfaces/draw-params';\r\n\r\n\r\nconst drawParams: DrawParams = {\r\n    showBars: true,\r\n    showCircles: true,\r\n    showNoise: false,\r\n    showInvert: false,\r\n    showEmboss: false,\r\n};\r\n\r\nconst DEFAULTS = Object.freeze({\r\n    sound1: \"media/New Adventure Theme.mp3\",\r\n});\r\n\r\nconst init = (): void => {\r\n    audio.setupWebaudio(DEFAULTS.sound1);\r\n    const canvasElement = document.querySelector(\"canvas\") as HTMLCanvasElement;\r\n    setupUI(canvasElement);\r\n    canvas.setupCanvas(canvasElement, audio.analyserNode);\r\n    loop();\r\n};\r\n\r\nconst setupUI = (canvasElement: HTMLCanvasElement): void => {\r\n    fetch('data/av-data.json')\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        const contentDiv = document.querySelector(\"#instructions\");\r\n        if (contentDiv) {\r\n            data.instructions.forEach(paragraph => {\r\n                const p = document.createElement('p');\r\n                p.textContent = paragraph;\r\n                contentDiv.appendChild(p);\r\n            });\r\n        } else {\r\n            console.error(\"Element with ID 'instructions' not found.\");\r\n        }\r\n    })\r\n    .catch(error => {\r\n        console.error('Error loading JSON data:', error);\r\n    });\r\n\r\n    const fsButton = document.querySelector(\"#fs-button\") as HTMLButtonElement;\r\n    const playButton = document.querySelector(\"#play-button\") as HTMLButtonElement;\r\n\r\n    fsButton.onclick = () => {\r\n        utils.goFullscreen(canvasElement);\r\n    };\r\n\r\n    playButton.onclick = (e: MouseEvent) => {\r\n        const target = e.target as HTMLButtonElement;\r\n        if (audio.audioCtx.state === \"suspended\") {\r\n            audio.audioCtx.resume();\r\n        }\r\n        if (target.dataset.playing === \"no\") {\r\n            audio.playCurrentSound();\r\n            target.dataset.playing = \"yes\";\r\n        } else {\r\n            audio.pauseCurrentSound();\r\n            target.dataset.playing = \"no\";\r\n        }\r\n    };\r\n\r\n    const audioFormButton = document.querySelector(\"#audio-form-button\") as HTMLButtonElement;\r\n\r\n    audioFormButton.onclick = () => {\r\n        canvas.changeAudioForm();\r\n\r\n        if (canvas.getWaveForm()) {\r\n            audioFormButton.innerHTML = \"Waveform Mode\";\r\n        } else {\r\n            audioFormButton.innerHTML = \"Frequency Mode\";\r\n        }\r\n    };\r\n\r\n    document.getElementById(\"toggle-panel\")?.addEventListener(\"click\", function () {\r\n        const panel = document.getElementById(\"left-panel\");\r\n        if (panel?.style.display === \"none\" || panel?.style.display === \"\") {\r\n            if (panel) panel.style.display = \"block\";\r\n            this.textContent = \"Hide Controls\";\r\n        } else {\r\n            if (panel) panel.style.display = \"none\";\r\n            this.textContent = \"Show Controls\";\r\n        }\r\n    });\r\n\r\n    const volumeSlider = document.querySelector(\"#volume-slider\") as HTMLInputElement;\r\n    const volumeLabel = document.querySelector(\"#volume-label\") as HTMLLabelElement;\r\n\r\n    const bassSlider = document.querySelector(\"#bass-slider\") as HTMLInputElement;\r\n    const trebleSlider = document.querySelector(\"#treble-slider\") as HTMLInputElement;\r\n\r\n    volumeSlider.oninput = (e: Event) => {\r\n        const target = e.target as HTMLInputElement;\r\n        audio.setVolume(Number(target.value));\r\n        volumeLabel.innerHTML = Math.round((Number(target.value) / 2) * 100).toString();\r\n        const minSpeed = 0.5;\r\n        const maxSpeed = 2.0;\r\n        const newPlaybackRate = minSpeed + (Number(target.value) / 2) * (maxSpeed - minSpeed);\r\n\r\n        (document.getElementById(\"mew-gif\") as HTMLVideoElement).playbackRate = newPlaybackRate;\r\n    };\r\n\r\n    bassSlider.oninput = (e: Event) => {\r\n        const target = e.target as HTMLInputElement;\r\n        const value = Number(target.value);\r\n        audio.bassNode.gain.value = value;\r\n    };\r\n\r\n    trebleSlider.oninput = (e: Event) => {\r\n        const target = e.target as HTMLInputElement;\r\n        const value = Number(target.value);\r\n        audio.trebleNode.gain.value = value;\r\n    };\r\n\r\n    volumeSlider.dispatchEvent(new Event(\"input\"));\r\n    bassSlider.value = \"0\";\r\n    trebleSlider.value = \"0\";\r\n\r\n    const fileInput = document.querySelector(\"#file-input\") as HTMLInputElement;\r\n    const defaultTrackButton = document.querySelector(\"#default-track-btn\") as HTMLButtonElement;\r\n    const nowPlaying = document.querySelector(\"#now-playing\") as HTMLDivElement;\r\n\r\n    fileInput.onchange = (e: Event) => {\r\n        const target = e.target as HTMLInputElement;\r\n        const file = target.files?.[0];\r\n        if (file) {\r\n            const objectURL = URL.createObjectURL(file);\r\n            audio.loadSoundFile(objectURL);\r\n            nowPlaying.innerHTML = \"Now playing: \" + file.name;\r\n        }\r\n    };\r\n\r\n    defaultTrackButton.onclick = () => {\r\n        audio.loadSoundFile(\"media/New Adventure Theme.mp3\");\r\n        nowPlaying.innerHTML = \"Now playing: New Adventure Theme.mp3\";\r\n    };\r\n\r\n    (document.querySelector(\"#cb-bars\") as HTMLInputElement).onclick = (e: Event) => {\r\n        const target = e.target as HTMLInputElement;\r\n        drawParams.showBars = target.checked;\r\n    };\r\n    (document.querySelector(\"#cb-circles\") as HTMLInputElement).onclick = (e: Event) => {\r\n        const target = e.target as HTMLInputElement;\r\n        drawParams.showCircles = target.checked;\r\n    };\r\n    (document.querySelector(\"#cb-noise\") as HTMLInputElement).onclick = (e: Event) => {\r\n        const target = e.target as HTMLInputElement;\r\n        drawParams.showNoise = target.checked;\r\n    };\r\n    (document.querySelector(\"#cb-invert\") as HTMLInputElement).onclick = (e: Event) => {\r\n        const target = e.target as HTMLInputElement;\r\n        drawParams.showInvert = target.checked;\r\n    };\r\n    (document.querySelector(\"#cb-emboss\") as HTMLInputElement).onclick = (e: Event) => {\r\n        const target = e.target as HTMLInputElement;\r\n        drawParams.showEmboss = target.checked;\r\n    };\r\n};\r\n\r\nconst loop = (): void => {\r\n    requestAnimationFrame(loop);\r\n    canvas.draw(drawParams);\r\n};\r\n\r\nexport { init };","import * as main from \"./main\";\r\n\r\nwindow.onload = () => {\r\n    console.log(\"window.onload called\");\r\n    // 1 - do preload here - load fonts, images, additional sounds, etc...\r\n\r\n    // 2 - start up app\r\n    main.init();\r\n};"],"names":["audioCtx","sourceNode","analyserNode","gainNode","bassNode","trebleNode","makeColor","red","green","blue","alpha","DEFAULTS","Object","freeze","gain","numSamples","loadSoundFile","Uint8Array","filePath","src","x","y","imageSrc","width","height","this","image","Image","pulseFactor","update","audioData","bassScale","trebleScale","audioNum","percent","bassPulseFactor","Math","sin","Date","now","treblePulseFactor","draw","ctx","scaledWidth","scaledHeight","drawImage","canvasWidth","canvasHeight","waveForm","gifImage","starSprites","fetch","then","response","json","data","stars","forEach","push","drawParams","showBars","showCircles","showNoise","showInvert","showEmboss","sound1","setupUI","canvasElement","contentDiv","document","querySelector","instructions","paragraph","p","createElement","textContent","appendChild","console","error","catch","fsButton","playButton","onclick","element","requestFullscreen","mozRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","e","target","state","resume","dataset","playing","play","pause","audioFormButton","innerHTML","getElementById","addEventListener","panel","style","display","volumeSlider","volumeLabel","bassSlider","trebleSlider","oninput","value","Number","round","toString","newPlaybackRate","playbackRate","dispatchEvent","Event","fileInput","defaultTrackButton","nowPlaying","onchange","file","files","objectURL","URL","createObjectURL","name","checked","loop","requestAnimationFrame","params","getByteTimeDomainData","getByteFrequencyData","save","restore","barWidth","length","margin","centerY","fillStyle","strokeStyle","i","barValue","barTop","barBottom","fillRect","strokeRect","parseFloat","maxRadius","globalAlpha","circleRadius","bassCircleRadius","trebleCircleRadius","beginPath","arc","PI","fill","closePath","floor","random","star","imageData","getImageData","putImageData","window","onload","log","AudioContext","webkitAudioContext","Audio","createMediaElementSource","createAnalyser","fftSize","createGain","createBiquadFilter","type","frequency","connect","destination","analyserNodeRef","getContext"],"sourceRoot":""}