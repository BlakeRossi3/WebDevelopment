{"version":3,"file":"bundle.js","mappings":"mBAWA,IAAMA,EAAqBC,SAASC,cAAc,iBAC5BD,SAASC,cAAc,kBAG/BC,iBAAiB,SAAS,WACtC,ICyBMC,ECjCgBC,EAAcC,EAA2BC,EFQzDC,EAAeR,EAAmBS,OCyBlCL,EAAeH,SAASC,cAAc,kBAC/BQ,YAAc,GAC3BN,EAAaO,UAAUC,IAAI,UCnCLP,EFapBG,EEbkCF,EFclC,SAACO,ICdE,SAAuBA,GAC5B,IAAMC,EAAmBb,SAASC,cAAc,YAChDY,EAAiBC,UAAY,GAE7BF,EAAKG,SAAQ,SAACC,GACZ,IAAMC,EAAOjB,SAASkB,cAAc,OACpCD,EAAKE,UAAY,cAGjBF,EAAKH,UAAY,8BACDE,EAAKI,QAAO,kBAAUJ,EAAKK,KAAI,2BACrCL,EAAKK,KAAI,qDACcL,EAAKM,MAAK,uDACPN,EAAKO,SAAQ,gBAKjDV,EAAiBW,YAAYP,EAE/B,GACF,CDNMQ,CAAcb,EAChB,EEhB6DN,EFiB7D,SAACH,ICQE,SAAmBuB,GACxB,IAAMvB,EAAeH,SAASC,cAAc,iBAC5CE,EAAaM,YAAciB,EAC3BvB,EAAaO,UAAUiB,OAAO,SAChC,CDXMC,CAAUzB,EACZ,EEhBF0B,MAAM,UAFY,sDAEF,iBAASzB,IACpB0B,MAAK,SAACC,GACH,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAM,wCAEpB,OAAOF,EAASG,MACpB,IACCJ,MAAK,SAAClB,GACHP,EAASO,EACb,IACCuB,OAAM,SAACC,GACJ9B,EAAc8B,EAAMV,QACxB,GFMN,G","sources":["webpack://final-practical/./src/main.ts","webpack://final-practical/./src/ui.ts","webpack://final-practical/./src/api.ts"],"sourcesContent":["// Import functions from api.js and ui.js\\\ninterface Creature {\n  name: string;\n  breed: string;\n  location: string;\n  picture: string;\n}\n  import { getData } from \"./api\";\n  import { renderResults, showError, clearError } from \"./ui\";\n\n// Get references to the dropdown and button\nconst creatureTypeSelect = document.querySelector(\"#creatureType\") as HTMLSelectElement;\nconst getDataButton = document.querySelector(\"#getDataButton\") as HTMLButtonElement;\n\n// Set up event listener for the \"Get Data\" button\ngetDataButton.addEventListener(\"click\", () => {\n  const selectedType = creatureTypeSelect.value; // Get the selected type\n  clearError(); // Clear any existing error messages\n\n  // Fetch data for the selected type\n  getData(\n    selectedType,\n    (data: Creature[]) => { \n      renderResults(data); // Render the results on success\n    },\n    (errorMessage) => {\n      showError(errorMessage); // Show an error message on failure\n    }\n  );\n});\n","// Updates the DOM to display the fetched data\n// - data: An array of objects containing creature details\ninterface Creature {\n  name: string;\n  breed: string;\n  location: string;\n  picture: string;\n}\nexport function renderResults(data : Creature[]) {\n  const resultsContainer = document.querySelector(\"#results\") as HTMLDivElement\n  resultsContainer.innerHTML = \"\"; // Clear existing results\n\n  data.forEach((item) => {\n    const card = document.createElement(\"div\");\n    card.className = \"result-card\";\n\n    // Add content to the card\n    card.innerHTML = `\n        <img src=\"${item.picture}\" alt=\"${item.name}\">\n        <h2>${item.name}</h2>\n        <p><strong>Breed:</strong> ${item.breed}</p>\n        <p><strong>Location:</strong> ${item.location}</p>\n      `;\n\n    // ADD THE LINE OF CODE HERE THAT WILL ADD THE CARD \n    // TO END OF THE RESULTS CONTAINER\n    resultsContainer.appendChild(card);\n\n  });\n}\n\n// Displays an error message on the page\n// - message: The error message to show\nexport function showError(message: string) {\n  const errorMessage = document.querySelector(\"#errorMessage\") as HTMLDivElement;\n  errorMessage.textContent = message;\n  errorMessage.classList.remove(\"hidden\"); // Make the error visible\n}\n\n// Clears any visible error message from the page\nexport function clearError() {\n  const errorMessage = document.querySelector(\"#errorMessage\") as HTMLDivElement;\n  errorMessage.textContent = \"\";\n  errorMessage.classList.add(\"hidden\"); // Hide the error\n}\n","// Fetches data from the Adoptable Creatures API\n// - type: The type of creature to fetch (e.g., \"cats\", \"dogs\", \"dragons\")\n// - callback: Function to run with the fetched data if successful\n// - errorCallback: Function to run with an error message if the request fails\n// Define the type for the callback parameters\ntype SuccessCallback = (param: object[]) => void; // Callback for successful data retrieval\ntype ErrorCallback = (param: string) => void; // Callback for error handling\n\nexport function getData(type: string, callback: SuccessCallback, errorCallback: ErrorCallback) {\n    const API_URL = \"https://people.rit.edu/anwigm/330/practical/api.php\";\n\n  fetch(`${API_URL}?type=${type}`)\n      .then((response) => {\n          if (!response.ok) {\n              throw new Error(\"Error fetching data from the server.\");\n          }\n          return response.json();\n      })\n      .then((data) => {\n          callback(data);\n      })\n      .catch((error) => {\n          errorCallback(error.message);        \n      });\n}\n\n  \n\n  \n  "],"names":["creatureTypeSelect","document","querySelector","addEventListener","errorMessage","type","callback","errorCallback","selectedType","value","textContent","classList","add","data","resultsContainer","innerHTML","forEach","item","card","createElement","className","picture","name","breed","location","appendChild","renderResults","message","remove","showError","fetch","then","response","ok","Error","json","catch","error"],"sourceRoot":""}